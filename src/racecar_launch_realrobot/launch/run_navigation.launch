<?xml version="1.0"?>

<launch>

  <arg name="map_topic" default="/map"/>
  <arg name="scan_topic" default="/scan"/>
  <arg name="ackermann_topic" default="/cmd_ackermann"/>
  <arg name="cmd_topic" default="/cmd_vel"/>
  <arg name="odom_topic" default="/odom"/>
  <arg name="laser_frame" default="laser_link"/>
  <arg name="base_frame" default="base_footprint"/>
  <arg name="map_frame" default="map"/>
  <arg name="odom_frame" default="odom"/>
  <arg name="mapfile_name"/>

  <arg name="origin_x" default="0.0"/>
  <arg name="origin_y" default="0.0"/>
  <arg name="speed" default="2"/>

  <!-- 将已有的map文件发布map话题 -->
  <node name="map_server" pkg="map_server" type="map_server" args="$(find racecar_launch_realrobot)/map/$(arg mapfile_name).yaml">
    <param name="frame_id" value="$(arg map_frame)"/>
  </node>

  <!-- http://wiki.ros.org/amcl -->
  <!-- 自适应蒙特卡洛定位(AMCL)：算法通过激光雷达的障碍物数据得到机器人在地图上的定位 -->
  <include file="$(find racecar_launch_realrobot)/launch/includes/amcl.launch.xml">
    <arg name="map_topic" default="$(arg map_topic)"/>
    <arg name="scan_topic" default="$(arg scan_topic)"/>
    <arg name="base_frame" default="$(arg base_frame)"/>
    <arg name="map_frame" default="$(arg map_frame)"/>
    <arg name="odom_frame" default="$(arg odom_frame)"/>
    <arg name="use_map_topic" default="true"/>
    <arg name="first_map_only" default="true"/>
    <arg name="init_x" default="$(arg origin_x)"/>
    <arg name="init_y" default="$(arg origin_y)"/>
    <arg name="init_a" default="0"/>
  </include>

  <!-- http://wiki.ros.org/move_base -->
  <!-- 机器人的导航节点 -->
  <include file="$(find racecar_launch_realrobot)/launch/includes/move_base.launch.xml" >
    <arg name="odom_topic" default="$(arg odom_topic)"/>
    <arg name="cmd_topic" default="$(arg cmd_topic)"/>
    <arg name="scan_topic" default="$(arg scan_topic)"/>
    <arg name="map_topic" default="$(arg map_topic)"/>
    <arg name="laser_frame" default="$(arg laser_frame)"/>
    <arg name="map_frame" default="$(arg map_frame)"/>
    <arg name="odom_frame" default="$(arg odom_frame)"/>
    <arg name="base_frame" default="$(arg base_frame)"/>
    <arg name="origin_x" default="$(arg origin_x)"/>
    <arg name="origin_y" default="$(arg origin_y)"/>
    <arg name="speed"    default="$(arg speed)"/>
  </include>

  <!-- 关于运动规划： -->
  <!-- 由于机器人是属于阿克曼转向模型的机器人，所以最好接收ackermann_msgs/AckermannDrive类型的控制数据，即：机器人接收转角度数和速度来完成运动控制 -->
  <!-- 而move_base输出的导航数据类型是geometry_msgs/Twist（/cmd_vel），因此需要处理 -->

  <!-- 方案1： -->
  <!-- 由于teb_local_planner会输出规划出来的路径，因此，通过跟随该路径完成导航 -->
  <!-- 评价：可能是最好的方案，但算法需要全部重写，难度最大 -->
  <!-- <node name="pure_pursuit" pkg="racecar_control" type="pure_pursuit" output="screen" >
    <rosparam file="$(find racecar_launch_realrobot)/param/move_base/pure_pursuit_params.yaml" command="load"/>
    <remap from="/pure_pursuit/odom" to="$(arg odom_topic)"/>
    <remap from="/pure_pursuit/global_planner" to="/move_base/TebLocalPlannerROS/local_plan"/>
    <remap from="/pure_pursuit/goal" to="/move_base_simple/goal"/>
    <remap from="/pure_pursuit/ackermann_cmd" to="$(arg ackermann_topic)"/>
  </node> -->

  <!-- 方案2： -->
  <!-- 由于teb_local_planner会输出规划出来的路径，使用mpc算法进行路径跟踪 -->
  <!--node name="MPC_Node" pkg="racecar_control" type="MPC_Node" output="screen">
    <rosparam file="$(find racecar_launch_realrobot)/param/move_base/simulator/mpc_params.yaml" command="load"/>
    <remap from="/odom" to="$(arg odom_topic)"/>
    <remap from="/ackermann_cmd" to="$(arg ackermann_topic)"/>
    <param name="global_path_topic" value="/move_base/TebLocalPlannerROS/local_plan"/>
    <param name="goal_topic" value="/move_base_simple/goal"/>
    <param name="map_frame" value="$(arg map_frame)"/>
    <param name="odom_frame" value="$(arg odom_frame)"/>
    <param name="car_frame" value="$(arg base_frame)"/>
  </node-->

  <!-- 方案3： -->
  <!-- 使用一个节点对move_base的/cmd_vel数据进行转换，完成导航，具体转换方式见cmd_to_ackermann.py -->
  <!-- 评价：不同的转换方式都存在一定的局限性，速度不快 -->
  <node name="path_pursuit_node" pkg="racecar_control" type="cmd_to_ackermann.py">
    <param name="twist_cmd_topic" value="$(arg cmd_topic)"/>
    <param name="ackermann_cmd_topic" value="$(arg ackermann_topic)"/>
  </node>

  <!-- 方案2的debug节点，可以看到teb_local_planner的feedback信息，使用前将teb的publish_feedback参数置true -->
  <!--node name="visualize_velocity_profile_node" pkg="racecar_control" type="visualize_velocity_profile.py">
    <param name="teb_feedback_topic" value="/move_base/TebLocalPlannerROS/teb_feedback"/>
  </node-->

  <!-- 计时节点,计算导航所用时间 -->
  <!--node name="race_timer_node" pkg="gazebo_tools" type="race_timer_node" output="screen">
    <param name="goal_topic" value="/move_base_simple/goal"/>
    <param name="odom_topic" value="$(arg odom_topic)"/>
    <param name="map_frame" value="$(arg map_frame)"/>
    <param name="use_goal_info" value="false"/>
    <param name="min_time" value="2"/>
    <param name="goal_x" value="0"/>
    <param name="consider_x" value="less"/>
  </node-->

</launch>
