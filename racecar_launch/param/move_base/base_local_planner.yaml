#http://wiki.ros.org/base_local_planner
TrajectoryPlannerROS:
    #Robot Configuration Parameters
    acc_lim_x: 0.5      #The x acceleration limit of the robot in meters/sec^2
    acc_lim_y: 0.0      #The y acceleration limit of the robot in meters/sec^2
    acc_lim_theta: 0.1  #The rotational acceleration limit of the robot in radians/sec^2
    max_vel_x: 0.5      #The maximum forward velocity allowed for the base in meters/sec
    min_vel_x: 0.0      #The minimum forward velocity allowed for the base in meters/sec.to overcome friction.
    max_vel_theta: 0.2  #The maximum rotational velocity allowed for the base in radians/sec
    min_vel_theta: -0.2 #The minimum rotational velocity allowed for the base in radians/sec
    min_in_place_vel_theta: 0.2 #The minimum rotational velocity allowed for the base while performing in-place rotations in radians/sec
    escape_vel: -0.5      #Speed used for driving during escapes in meters/sec.Note that it must be negative in order for the robot to actually reverse. A positive speed will cause the robot to move forward while attempting to escape.
    holonomic_robot: false #Determines whether velocity commands are generated for a holonomic or non-holonomic robot. For holonomic robots, strafing velocity commands may be issued to the base. For non-holonomic robots, no strafing velocity commands will be issued.

    #Goal Tolerance Parameters
    yaw_goal_tolerance: 0.20 #The tolerance in radians for the controller in yaw/rotation when achieving its goal
    xy_goal_tolerance: 0.10  #The tolerance in meters for the controller in the x & y distance when achieving a goal
    latch_xy_goal_tolerance: true  #If goal tolerance is latched, if the robot ever reaches the goal xy location it will simply rotate in place, even if it ends up outside the goal tolerance while it is doing so.

    #Forward Simulation Parameters
#    sim_time: 1.0          #The amount of time to forward-simulate trajectories in seconds
#    sim_granularity: 0.025 #The step size, in meters, to take between points on a given trajectory
#    vx_samples: 20         #The number of samples to use when exploring the x velocity space
#    vtheta_samples: 20     #The number of samples to use when exploring the theta velocity space
    controller_frequency: 10.0 #The frequency at which this controller will be called in Hz.

    #Trajectory Scoring Parameters
    #cost = 
    #  pdist_scale * (distance to path from the endpoint of the trajectory in map cells or meters depending on the meter_scoring parameter) 
    #  + gdist_scale * (distance to local goal from the endpoint of the trajectory in map cells or meters depending on the meter_scoring parameter) 
    #  + occdist_scale * (maximum obstacle cost along the trajectory in obstacle cost (0-254))
    meter_scoring: true    #Whether the gdist_scale and pdist_scale parameters should assume that goal_distance and path_distance are expressed in units of meters or cells.
    pdist_scale: 0.6       #The weighting for how much the controller should stay close to the path it was given, maximal possible value is 5.0
    gdist_scale: 0.8       #The weighting for how much the controller should attempt to reach its local goal, also controls speed, maximal possible value is 5.0
    occdist_scale: 0.01    #The weighting for how much the controller should attempt to avoid obstacles


    #Oscillation Prevention Parameters
    oscillation_reset_dist: 0.05 #How far the robot must travel in meters before oscillation flags are reset

    #Global Plan Parameters
    prune_plan: true  #Defines whether or not to eat up the plan as the robot moves along the path. If set to true, points will fall off the end of the plan once the robot moves 1 meter past them.
    
    
    
    
